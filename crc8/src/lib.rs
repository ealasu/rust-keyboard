#![no_std]

pub mod predefined;

pub struct Crc8 {
    table: [u8; 256],
}

impl Crc8 {
    pub fn new(poly: u8, rev: bool) -> Self {
        let table = if rev {
            make_table_r(poly)
        } else {
            make_table(poly)
        };
        Crc8 { table: table }
    }


    #[inline]
    pub fn calc_byte(&self, crc: u8, v: u8) -> u8 {
        self.table[(crc ^ v) as usize]
    }

    pub fn calc_buf(&self, buf: &[u8]) -> u8 {
        let mut crc = 0;
        for &v in buf.iter() {
            crc = self.calc_byte(crc, v);
        }
        crc
    }
}

pub fn make_table(poly: u8) -> [u8; 256] {
    let mut table = [0u8; 256];
    for i in 0..256 {
        let mut crc = i as u8;
        for _ in 0..8 {
            crc = (crc << 1) ^ if (crc & 0x80) != 0 { poly } else { 0 };
        }
        table[i] = (crc & 0xFF) as u8;
    }
    table
}

pub fn make_table_r(poly: u8) -> [u8; 256] {
    let poly = bitrev(poly);
    let mut table = [0u8; 256];
    for i in 0..256 {
        let mut crc = i as u8;
        for _ in 0..8 {
            crc = (crc >> 1) ^ if (crc & 1) != 0 { poly } else { 0 };
        }
        table[i] = (crc & 0xFF) as u8;
    }
    table
}

fn bitrev(mut v: u8) -> u8 {
    let mut res = 0;
    for _ in 0..8 {
        res = (res << 1) | (v & 1);
        v >>= 1;
    }
    res
}

pub fn crc8_maxim(buf: &[u8]) -> u8 {
    let mut crc: u8 = 0;
    for &inbyte in buf.iter() {
        let mut inbyte = inbyte;
        for _ in 0..8 {
            let mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if mix != 0 {
                crc ^= 0x8C;
            }
            inbyte >>= 1;
        }
    }
    crc
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_maxim() {
        let crc = Crc8::new(predefined::POLY_MAXIM, true);
        assert_eq!(crc.calc_buf(&[0x12]), 0x21);
        //assert_eq!(crc.calc_buf(&[0xFF, 0x00, 0x07, 0x5F, 0x07, 0xB7, 0x00, 0x68]),
                   //0x37);
    }

    #[test]
    fn test_me() {
        let crc = Crc8::new(predefined::POLY_CRC8, false);
        //assert_eq!(crc.calc_byte(0, 0x12), 0x21);
        //assert_eq!(crc.calc_buf(&[0xFF, 0x00, 0x07, 0x5F, 0x07, 0xB7, 0x00, 0x68]),
                   //0x37);
    }

    #[test]
    fn test_table_crc8() {
        assert_eq!(
            &make_table(predefined::POLY_CRC8 as u8)[..],  &[
            0, 7, 14, 9, 28, 27, 18, 21, 56, 63, 54, 49, 36, 35, 42, 45, 112, 119, 126, 121, 108,
            107, 98, 101, 72, 79,70, 65, 84, 83, 90, 93, 224, 231, 238, 233, 252, 251, 242, 245,
            216, 223, 214, 209, 196, 195, 202, 205, 144, 151, 158, 153, 140, 139, 130, 133, 168,
            175, 166, 161, 180, 179, 186, 189, 199, 192, 201, 206, 219, 220, 213, 210, 255, 248,
            241, 246, 227, 228, 237, 234, 183, 176, 185, 190, 171, 172, 165, 162, 143, 136, 129,
            134, 147, 148, 157, 154, 39, 32, 41, 46, 59, 60, 53, 50, 31, 24, 17, 22, 3, 4, 13, 10,
            87, 80, 89, 94, 75, 76, 69, 66, 111, 104, 97, 102, 115, 116, 125, 122, 137, 142, 135,
            128, 149, 146, 155, 156, 177, 182, 191, 184, 173, 170, 163, 164, 249, 254, 247, 240,
            229, 226, 235, 236, 193, 198, 207, 200, 221, 218, 211, 212, 105, 110, 103, 96, 117,
            114, 123, 124, 81, 86, 95, 88, 77, 74, 67, 68, 25, 30, 23, 16, 5, 2, 11, 12, 33,38, 47,
            40, 61, 58, 51, 52, 78, 73, 64, 71, 82, 85, 92, 91, 118, 113, 120, 127, 106, 109, 100,
            99, 62, 57, 48, 55, 34, 37, 44, 43, 6, 1, 8, 15, 26, 29, 20, 19, 174, 169, 160, 167,
            178, 181, 188, 187, 150, 145, 152, 159, 138, 141, 132, 131, 222, 217, 208, 215, 194,
            197, 204, 203, 230, 225, 232, 239, 250, 253, 244, 243,
            ][..]);
    }

    #[test]
    fn test_table_maxim() {
        assert_eq!(
            &make_table_r(predefined::POLY_MAXIM)[..], &[
            0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65, 157, 195, 33, 127,
            252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 28, 254, 160,
            225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29,
            67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7, 219,
            133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90,
            184, 230, 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37, 123, 58, 100,
            134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113,
            147, 205, 17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241,
            19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50, 108, 142, 208, 83, 13,
            239, 177, 240, 174, 76, 18, 145, 207, 45, 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86,
            180, 234, 105, 55, 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170,
            72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168, 116, 42,
            200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53,
            ][..]);
    }
}
